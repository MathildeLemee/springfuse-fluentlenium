/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/hibernate/support/GenericEnumUserType.p.vm.java
 */
package com.yourcompany.yourproject.dao.hibernate;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import org.hibernate.HibernateException;
import org.hibernate.type.NullableType;
import org.hibernate.type.TypeFactory;
import org.hibernate.usertype.ParameterizedType;
import org.hibernate.usertype.UserType;

/**
 * This class is a generic type for serializing enum using hibernate jpa provider.
 * The enum needs to have two methods. The first one is to identify the enum by its name, the other one
 * is to identify the enum by its value.<p>
 * @see http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e2794
 */
@SuppressWarnings("all")
public class GenericEnumUserType implements UserType, ParameterizedType, Serializable {

    public static final String IDENTIFIER_METHOD = "identifierMethod";
    public static final String VALUE_OF_METHOD = "valueOfMethod";
    public static final String ENUM_CLASS = "enumClass";
    public static final String FQN = "com.yourcompany.yourproject.dao.hibernate.GenericEnumUserType";
    private String defaultIdentifierMethodName = "name";
    private String defaultValueOfMethodName = "valueOf";

    public GenericEnumUserType() {
    }

    public GenericEnumUserType(String identifierMethodeName, String valueOfMethodName) {
        this.defaultIdentifierMethodName = identifierMethodeName;
        this.defaultValueOfMethodName = valueOfMethodName;
    }

    @SuppressWarnings("unchecked")
    private Class<? extends Enum> enumClass;
    private Class<?> identifierType;

    // do not serialize, as Method is not serializable
    // if serialization occurs, we'll get back the identiferMethod again from its name
    private transient Method identifierMethod;
    private String identifierMethodName;

    // do not serialize, as Method is not serializable
    // if serialization occurs, we'll get back the valueOfMethod again from its name
    private transient Method valueOfMethod;
    private String valueOfMethodName;

    private NullableType type;
    private int[] sqlTypes;

    public void setParameterValues(Properties parameters) {
        String enumClassName = parameters.getProperty(ENUM_CLASS);
        try {
            enumClass = Class.forName(enumClassName).asSubclass(Enum.class);
        } catch (ClassNotFoundException cfne) {
            throw new HibernateException("Enum class not found", cfne);
        }

        identifierMethodName = parameters.getProperty(IDENTIFIER_METHOD, defaultIdentifierMethodName);
        identifierMethod = getIdentifierMethod(identifierMethodName);
        identifierType = identifierMethod.getReturnType();

        type = (NullableType) TypeFactory.basic(identifierType.getName());

        if (type == null)
            throw new HibernateException("Unsupported identifier type " + identifierType.getName());

        sqlTypes = new int[] { type.sqlType() };
        valueOfMethodName = parameters.getProperty(VALUE_OF_METHOD, defaultValueOfMethodName);
        valueOfMethod = getValueOfMethod(valueOfMethodName);
    }

    private Method getValueOfMethod(String valueOfMethodName) {
        try {
            return enumClass.getMethod(valueOfMethodName, new Class[] { identifierType });
        } catch (Exception e) {
            throw new HibernateException("Failed to obtain valueOf method " + valueOfMethodName, e);
        }
    }

    private Method getIdentifierMethod(String identifierMethodName) {
        try {
            return enumClass.getMethod(identifierMethodName, new Class[0]);
        } catch (NoSuchMethodException e) {
            throw new HibernateException("Failed to obtain idenfier method " + identifierMethodName, e);
        }
    }

    @SuppressWarnings("unchecked")
    public Class returnedClass() {
        return enumClass;
    }

    public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws HibernateException, SQLException {
        Object identifier = type.get(rs, names[0]);
        if (rs.wasNull()) {
            return null;
        }

        try {
            if (valueOfMethod == null) {
                // if deserialized, we need to get back the method from the name 
                valueOfMethod = getValueOfMethod(valueOfMethodName);
            }

            return valueOfMethod.invoke(enumClass, new Object[] { identifier });
        } catch (Exception e) {
            throw new HibernateException("Exception while invoking valueOf method '" + valueOfMethod.getName()
                    + "' of " + "enumeration class '" + enumClass + "'", e);
        }
    }

    public void nullSafeSet(PreparedStatement st, Object value, int index) throws HibernateException, SQLException {
        try {
            if (value == null) {
                st.setNull(index, type.sqlType());
            } else {
                if (identifierMethod == null) {
                    // if deserialized, we need to get back the method from the name 
                    identifierMethod = getIdentifierMethod(identifierMethodName);
                }

                Object identifier = identifierMethod.invoke(value, new Object[0]);
                type.set(st, identifier, index);
            }
        } catch (Exception e) {
            throw new HibernateException("Exception while invoking identifierMethod '" + identifierMethod.getName()
                    + "' of " + "enumeration class '" + enumClass + "'", e);
        }
    }

    public int[] sqlTypes() {
        return sqlTypes;
    }

    public Object assemble(Serializable cached, Object owner) throws HibernateException {
        return cached;
    }

    public Object deepCopy(Object value) throws HibernateException {
        return value;
    }

    public Serializable disassemble(Object value) throws HibernateException {
        return (Serializable) value;
    }

    public boolean equals(Object x, Object y) throws HibernateException {
        return x == y;
    }

    public int hashCode(Object x) throws HibernateException {
        return x.hashCode();
    }

    public boolean isMutable() {
        return false;
    }

    public Object replace(Object original, Object target, Object owner) throws HibernateException {
        return original;
    }

}
