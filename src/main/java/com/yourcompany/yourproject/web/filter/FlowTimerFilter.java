/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-common:src/main/java/web/filter/FlowTimerFilter.p.vm.java
 */
package com.yourcompany.yourproject.web.filter;

import java.io.IOException;
import java.util.Arrays;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.webflow.definition.StateDefinition;
import org.springframework.webflow.definition.TransitionDefinition;
import org.springframework.webflow.execution.Event;
import org.springframework.webflow.execution.FlowExecutionException;
import org.springframework.webflow.execution.FlowExecutionListenerAdapter;
import org.springframework.webflow.execution.RequestContext;
import org.springframework.webflow.execution.View;

import com.yourcompany.yourproject.context.LogContext;
import com.yourcompany.yourproject.security.SpringSecurityContext;

/**
 * Log current flow transition, state, etc.
 * You must also configure this class as an Execution Listener in Spring Web Flow conf.
 */
public final class FlowTimerFilter extends FlowExecutionListenerAdapter implements Filter {

    private static final byte SPACE = 32;
    private static final Logger logger = Logger.getLogger(FlowTimerFilter.class);
    private static final ThreadLocal<StringBuilder> message = new ThreadLocal<StringBuilder>();

    @Override
    public void init(FilterConfig config) throws ServletException {
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,
            ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        // reset context.
        message.set(new StringBuilder(""));

        // set up log context for this thread so these information can be used by log4j
        String username = SpringSecurityContext.getUsername();
        LogContext.setLogin(username != null ? username : "no username");
        LogContext.setSessionId(httpRequest.getSession().getId());

        // TODO: move temp hack
        // (partial ajax response use it. Required for IE8.)
        if (request.getCharacterEncoding() == null) {
            request.setCharacterEncoding("UTF-8");
        }

        // timer
        long start = System.currentTimeMillis();
        chain.doFilter(request, response);
        long stop = System.currentTimeMillis();
        String duration = Long.toString(stop - start);

        if (duration.length() < 5) {
            byte[] spaces = new byte[5 - duration.length()];
            Arrays.fill(spaces, SPACE);
            duration = new String(spaces) + duration;
        }

        logger.info("flow only duration: " + duration + " ms - " + httpRequest.getRequestURI() + message.get());

        // reset context
        LogContext.resetLogContext();
    }

    @Override
    public void destroy() {
    }

    @Override
    public void viewRendered(RequestContext context, View view, StateDefinition viewState) {
        StringBuilder sb = message.get();
        if (sb == null) {
            logger.info("viewRendered strange case: "
                    + ((HttpServletRequest) context.getExternalContext().getNativeRequest()).getRequestURI());
            return;
        }

        sb.append("\n\tActive flow: ")
                .append(context.getActiveFlow() == null ? "N/A" : context.getActiveFlow().getId()).append(
                        " (" + context.getFlowExecutionUrl() + ")");
        sb.append("\n\tCurrent State: ").append(
                (context.getCurrentState() == null ? "N/A" : context.getCurrentState().getId()));
        sb.append("\n\tCurrent Transition: ").append(
                context.getCurrentTransition() == null ? "N/A" : context.getCurrentTransition().getId());
    }

    @Override
    public void eventSignaled(RequestContext context, Event event) {
        StringBuilder sb = message.get();
        if (sb == null) {
            logger.info("eventSignaled strange case: "
                    + ((HttpServletRequest) context.getExternalContext().getNativeRequest()).getRequestURI());
            return;
        }

        sb.append("\n\teventSignaled: ").append(event.getId());
    }

    @Override
    public void transitionExecuting(RequestContext context, TransitionDefinition transition) {
        StringBuilder sb = message.get();
        if (sb == null) {
            logger.info("transitionExecuting strange case: "
                    + ((HttpServletRequest) context.getExternalContext().getNativeRequest()).getRequestURI());
            return;
        }

        sb.append("\n\ttransitionExecuting: ").append(
                "on=" + transition.getId() + " to=" + transition.getTargetStateId());
    }

    @Override
    public void exceptionThrown(RequestContext context, FlowExecutionException exception) {
        HttpServletRequest req = (HttpServletRequest) context.getExternalContext().getNativeRequest();
        req.getSession().setAttribute("lastException", exception);
        req.getSession().setAttribute("lastExceptionUniqueId", exception.hashCode());

        logger.error("EXCEPTION unique id: " + exception.hashCode(), exception); // todo: better

        StringBuilder sb = message.get();
        if (sb == null) {
            logger.info("exceptionThrown strange case: "
                    + ((HttpServletRequest) context.getExternalContext().getNativeRequest()).getRequestURI());
            return;
        }

        sb.append("\n\tException Thrown: ").append(exception);
        if (exception.getCause() != null) {
            sb.append("\n\tException Cause: ").append(exception.getCause());
        }
    }
}