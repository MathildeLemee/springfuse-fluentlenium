/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-primefaces:src/main/java/GenericConverter.p.vm.java
 */
package com.yourcompany.yourproject.web.converter;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.binding.convert.ConversionService;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

import com.yourcompany.yourproject.domain.Identifiable;
import com.yourcompany.yourproject.service.support.GenericEntityService;

/**
 * Base JSF converter for JPA entities.
 */
public class GenericConverter<E extends Identifiable<PK>, PK extends Serializable> implements Converter {
    private Class<?> pkType = (Class<?>) ((ParameterizedType) getClass().getGenericSuperclass())
            .getActualTypeArguments()[1];

    private String printExpression = "primaryKey";
    @Autowired
    protected ConversionService conversionService;
    protected GenericEntityService<E, PK> entityService;

    protected GenericConverter(GenericEntityService<E, PK> entityService, String printExpression) {
        this.entityService = entityService;
        if (printExpression != null) {
            this.printExpression = printExpression;
        }
    }

    // -------------------------------
    // Converter implementation
    // -------------------------------

    @SuppressWarnings("unchecked")
    public Object getAsObject(FacesContext context, UIComponent component, String value) throws ConverterException {
        if (value == null || "-1".equals(value)) {
            return null;
        }

        PK primaryKey = (PK) conversionService.executeConversion(value, pkType);
        return entityService.getByPrimaryKey(primaryKey);
    }

    @SuppressWarnings("unchecked")
    public String getAsString(FacesContext context, UIComponent component, Object object) {
        if (object == null || !Identifiable.class.isAssignableFrom(object.getClass())) {
            return "-1";
        }
        return ((Identifiable<PK>) object).getPrimaryKey().toString();
    }

    // ------------------------------------
    // Printer (used from view and flows)
    // ------------------------------------

    /**
     * Execute the printExpression using the passed entity as root object.
     */
    public String print(E entity) {
        if (entity == null) {
            return "";
        }
        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression(printExpression);
        return exp.getValue(entity, String.class);
    }
}
