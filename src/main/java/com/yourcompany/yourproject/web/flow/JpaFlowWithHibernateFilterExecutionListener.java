/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-primefaces:src/main/java/flow/JpaFlowWithHibernateFilterExecutionListener.p.vm.java
 */
package com.yourcompany.yourproject.web.flow;

import javax.persistence.EntityManagerFactory;

import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.webflow.core.collection.MutableAttributeMap;
import org.springframework.webflow.definition.FlowDefinition;
import org.springframework.webflow.execution.FlowExecutionException;
import org.springframework.webflow.execution.FlowSession;
import org.springframework.webflow.execution.RequestContext;

import org.springframework.webflow.persistence.JpaFlowExecutionListener;

import com.yourcompany.yourproject.dao.hibernate.HibernateFilterContext;

/**
 * A custom Jpa flow listener that also enables Hibernate filters.
 */
public class JpaFlowWithHibernateFilterExecutionListener extends JpaFlowExecutionListener {

    private HibernateFilterContext hibernateFilterContext;

    public JpaFlowWithHibernateFilterExecutionListener(EntityManagerFactory entityManagerFactory,
            PlatformTransactionManager transactionManager, HibernateFilterContext hibernateFilterContext) {
        super(entityManagerFactory, transactionManager);
        this.hibernateFilterContext = hibernateFilterContext;
    }

    @Override
    public void sessionStarting(RequestContext context, FlowSession session, MutableAttributeMap input) {
        super.sessionStarting(context, session, input);

        if (isPersistenceContext(session.getDefinition())) {
            hibernateFilterContext.enableFilters();
        }
    }

    @Override
    public void paused(RequestContext context) {
        if (isPersistenceContext(context.getActiveFlow())) {
            hibernateFilterContext.disableFilters();
        }

        super.paused(context);
    }

    @Override
    public void resuming(RequestContext context) {
        super.resuming(context);

        if (isPersistenceContext(context.getActiveFlow())) {
            hibernateFilterContext.enableFilters();
        }
    }

    @Override
    public void sessionEnding(RequestContext context, FlowSession session, String outcome, MutableAttributeMap output) {
        if (isPersistenceContext(session.getDefinition())) {
            hibernateFilterContext.disableFilters();
        }

        super.sessionEnding(context, session, outcome, output);
    }

    @Override
    public void exceptionThrown(RequestContext context, FlowExecutionException exception) {
        if (context.getFlowExecutionContext().isActive()) {
            if (isPersistenceContext(context.getActiveFlow())) {
                hibernateFilterContext.disableFilters();
            }
        }

        super.exceptionThrown(context, exception);
    }

    private boolean isPersistenceContext(FlowDefinition flow) {
        return flow.getAttributes().contains(PERSISTENCE_CONTEXT_ATTRIBUTE);
    }
}
