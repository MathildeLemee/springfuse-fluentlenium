/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-common:src/main/java/web/context/AccountContextSupport.p.vm.java
 */
package com.yourcompany.yourproject.web.context;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.apache.log4j.Logger;

import com.yourcompany.yourproject.context.AccountContext;
import com.yourcompany.yourproject.security.SpringSecurityContext;

import com.yourcompany.yourproject.domain.Account;
import com.yourcompany.yourproject.service.AccountService;

@Service
public class AccountContextSupport {
    static final private Logger logger = Logger.getLogger(AccountContextSupport.class);

    private AccountService accountService;

    @Autowired
    public AccountContextSupport(AccountService accountService) {
        this.accountService = accountService;
    }

    /**
     * Set up the AccountContext on the current thread.
     * Should be invoked once, e.g from your web filter or interceptor.
     * Do not forget to call the resetContext method when you are done
     * with the request.
     */
    public void processAccountContext(HttpServletRequest req) {
        // set up the account context
        AccountContext accountContext = new AccountContext();
        AccountContext.setAccountContext(accountContext);
        accountContext.setSessionId(req.getSession().getId());
        accountContext.setRoles(SpringSecurityContext.getRoles());

        if (SpringSecurityContext.getUserDetails() != null) {
            // load the account from the database.
            // we assume here that the second level cache is used,
            // otherwise we would hit the database at each request.
            Account account = new Account();
            String username = SpringSecurityContext.getUsername();
            account.setUsername(username);
            account = accountService.findUniqueOrNone(account);

            if (account != null) {
                // set up account context for this thread
                accountContext.setAccount(account);
                accountContext.setUsername(account.getUsername());
            }
        } else if (logger.isDebugEnabled()) {
            logger.debug("No user details");
        }
    }

    /**
     * Reset the account context and the log context from the current thread.
     */
    public void resetContext() {
        AccountContext.resetAccountContext();
    }
}