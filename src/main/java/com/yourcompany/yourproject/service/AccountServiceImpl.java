/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.yourcompany.yourproject.service;

import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.yourcompany.yourproject.dao.support.GenericDao;
import com.yourcompany.yourproject.service.support.GenericEntityServiceImpl;
import com.yourcompany.yourproject.domain.Account;
import com.yourcompany.yourproject.dao.AccountDao;

/**
 *
 * Default implementation of the {@link AccountService} interface
 * @see AccountService
 */
@Service("accountService")
public class AccountServiceImpl extends GenericEntityServiceImpl<Account, String> implements AccountService {

    private static final Logger logger = Logger.getLogger(AccountServiceImpl.class);

    protected AccountDao accountDao;

    @Autowired
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

    /**
     * Dao getter used by the {@link GenericEntityServiceImpl}.
     */
    @Override
    public GenericDao<Account, String> getDao() {
        return accountDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account getNew() {
        return new Account();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account getNewWithDefaults() {
        Account result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account get(Account model) {
        if (model == null) {
            return null;
        }

        if (model.isPrimaryKeySet()) {
            return super.get(model);
        }

        if (model.getUsername() != null && !model.getUsername().isEmpty()) {
            Account result = getByUsername(model.getUsername());
            if (result != null) {
                return result;
            }
        }

        if (model.getEmail() != null && !model.getEmail().isEmpty()) {
            Account result = getByEmail(model.getEmail());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void delete(Account account) {
        if (account == null) {
            if (logger.isDebugEnabled()) {
                logger.debug("Skipping deletion for null model!");
            }

            return;
        }

        // remove the reference from the associated contactInformation
        if (account.getContactInformation() != null) {
            account.getContactInformation().setParent(null);
        }

        super.delete(account);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account getByUsername(String _username) {
        Account account = new Account();
        account.setUsername(_username);
        return findUniqueOrNone(account);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account getByEmail(String _email) {
        Account account = new Account();
        account.setEmail(_email);
        return findUniqueOrNone(account);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByEmail(String email) {
        delete(getByEmail(email));
    }
}