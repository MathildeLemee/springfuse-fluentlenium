/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.yourcompany.yourproject.domain;

import static javax.persistence.EnumType.STRING;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Length;
import com.yourcompany.yourproject.domain.Account;
import com.yourcompany.yourproject.domain.enums.CivilityEnum;

@Entity
@Table(name = "CONTACT_INFO")
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myContactInfoFilter", defaultCondition = "account_id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myContactInfoFilter")
public class ContactInfo implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(ContactInfo.class);

    // Raw attributes
    private Integer id; // pk
    private CivilityEnum civility;
    private String lastName;
    private String firstName;
    private Date birthDate;
    private Date otherDate;

    // Technical attributes for query by example
    private String accountId; // unique (not null)

    // One to one
    private Account parent; // unique (not null) (accountId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public ContactInfo() {
    }

    public ContactInfo(Integer primaryKey) {
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Transient
    @XmlTransient
    public Integer getPrimaryKey() {
        return getId();
    }

    public void setPrimaryKey(Integer id) {
        setId(id);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "ID", nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [accountId] ------------------------

    @Column(name = "account_id", nullable = false, unique = true, length = 32, insertable = false, updatable = false)
    public String getAccountId() {
        return accountId;
    }

    private void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    // -- [civility] ------------------------

    @Column(length = 2)
    @Enumerated(STRING)
    public CivilityEnum getCivility() {
        return civility;
    }

    public void setCivility(CivilityEnum civility) {
        this.civility = civility;
    }

    // -- [lastName] ------------------------

    @Length(max = 255)
    @Column(name = "last_name")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // -- [firstName] ------------------------

    @Length(max = 255)
    @Column(name = "first_name")
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // -- [birthDate] ------------------------

    @Column(name = "birth_date", length = 23)
    @Temporal(TIMESTAMP)
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    // -- [otherDate] ------------------------

    @Column(name = "OTHER_DATE", length = 23)
    @Temporal(TIMESTAMP)
    public Date getOtherDate() {
        return otherDate;
    }

    public void setOtherDate(Date otherDate) {
        this.otherDate = otherDate;
    }

    // --------------------------------------------------------------------
    // One to one
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Owner side of one-to-one relation: ContactInfo.accountId ==> Account.accountId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "account_id", nullable = false, unique = true)
    @OneToOne(fetch = LAZY)
    public Account getParent() {
        return parent;
    }

    public void setParent(Account parent) {
        this.parent = parent;

        if (parent != null) {
            setAccountId(parent.getAccountId());
        } else {
            setAccountId(null);
        }
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object contactInfo) {
        if (this == contactInfo) {
            return true;
        }

        if (!(contactInfo instanceof ContactInfo)) {
            return false;
        }

        ContactInfo other = (ContactInfo) contactInfo;

        if (getAccountId() == null) {
            if (other.getAccountId() != null) {
                return false;
            }
        } else if (!getAccountId().equals(other.getAccountId())) {
            return false;
        }

        return true;
    }

    private volatile int previousHashCode = 0;

    /**
     * hashCode implementation using a business key.
     */
    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (getAccountId() != null ? getAccountId().hashCode() : 0);

        if (previousHashCode != 0 && previousHashCode != result) {
            logger.warn("DEVELOPER: hashCode has changed!."
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                    + getClass().getCanonicalName());
        }

        previousHashCode = result;
        return result;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------

    /**
     * Construct a readable string representation for this ContactInfo instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("contactInfo.id=[").append(getId()).append("]\n");
        result.append("contactInfo.accountId=[").append(getAccountId()).append("]\n");
        result.append("contactInfo.civility=[").append(getCivility()).append("]\n");
        result.append("contactInfo.lastName=[").append(getLastName()).append("]\n");
        result.append("contactInfo.firstName=[").append(getFirstName()).append("]\n");
        result.append("contactInfo.birthDate=[").append(getBirthDate()).append("]\n");
        result.append("contactInfo.otherDate=[").append(getOtherDate()).append("]\n");
        return result.toString();
    }
}