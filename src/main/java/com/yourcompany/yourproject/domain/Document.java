/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.yourcompany.yourproject.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.UploadedFile;
import com.yourcompany.yourproject.domain.Account;

@Entity
@Table(name = "DOCUMENT")
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myDocumentFilter", defaultCondition = "account_id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myDocumentFilter")
public class Document implements Identifiable<String>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(Document.class);

    // Raw attributes
    private String documentId; // pk
    private String documentContentType; // not null
    private Integer documentSize; // not null
    private String documentFileName; // not null
    private byte[] documentBinary;
    private Integer version;

    // Technical attributes for query by example
    private String accountId; // not null

    // Many to one
    private Account account; // not null (accountId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public Document() {
    }

    public Document(String primaryKey) {
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Transient
    @XmlTransient
    public String getPrimaryKey() {
        return getDocumentId();
    }

    public void setPrimaryKey(String documentId) {
        setDocumentId(documentId);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isDocumentIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [documentId] ------------------------

    @Column(name = "DOCUMENT_ID", nullable = false, unique = true, length = 32)
    @GeneratedValue(generator = "strategy-uuid")
    @GenericGenerator(name = "strategy-uuid", strategy = "uuid")
    @Id
    public String getDocumentId() {
        return documentId;
    }

    public void setDocumentId(String documentId) {
        this.documentId = documentId;
    }

    @Transient
    public boolean isDocumentIdSet() {
        return documentId != null && !documentId.isEmpty();
    }

    // -- [accountId] ------------------------

    @Column(name = "account_id", nullable = false, length = 32, insertable = false, updatable = false)
    public String getAccountId() {
        return accountId;
    }

    private void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    // -- [documentContentType] ------------------------

    @NotEmpty
    @Length(max = 255)
    @Column(name = "DOCUMENT_CONTENT_TYPE", nullable = false)
    public String getDocumentContentType() {
        return documentContentType;
    }

    public void setDocumentContentType(String documentContentType) {
        this.documentContentType = documentContentType;
    }

    // -- [documentSize] ------------------------

    @NotNull
    @Column(name = "DOCUMENT_SIZE", nullable = false, precision = 10)
    public Integer getDocumentSize() {
        return documentSize;
    }

    public void setDocumentSize(Integer documentSize) {
        this.documentSize = documentSize;
    }

    // -- [documentFileName] ------------------------

    @NotEmpty
    @Length(max = 255)
    @Column(name = "DOCUMENT_FILE_NAME", nullable = false)
    public String getDocumentFileName() {
        return documentFileName;
    }

    public void setDocumentFileName(String documentFileName) {
        this.documentFileName = documentFileName;
    }

    // -- [documentBinary] ------------------------

    @Basic(fetch = FetchType.LAZY)
    @Column(name = "DOCUMENT_BINARY")
    @Lob
    public byte[] getDocumentBinary() {
        return documentBinary;
    }

    public void setDocumentBinary(byte[] documentBinary) {
        this.documentBinary = documentBinary;
    }

    // Handle file upload/download (primefaces support)
    private transient StreamedContent sc;

    /**
     * Primefaces support for file upload
     */
    public void handleFileUpload(FileUploadEvent fileUploadEvent) {
        sc = null;
        UploadedFile uploadedFile = fileUploadEvent.getFile(); //application code
        setDocumentBinary(uploadedFile.getContents());
        setDocumentSize(documentBinary.length);
        setDocumentContentType(uploadedFile.getContentType());
        setDocumentFileName(uploadedFile.getFileName());
    }

    /**
     * Primefaces support for file download
     */
    @Transient
    @XmlTransient
    public StreamedContent getStreamedContentFile() {
        if (sc == null) {
            sc = new StreamedContent() {
                InputStream is = null;

                @Override
                public String getContentType() {
                    return getDocumentContentType();
                }

                @Override
                public String getName() {
                    return getDocumentFileName();
                }

                @Override
                public InputStream getStream() {
                    if (is == null) {
                        is = new ByteArrayInputStream(getDocumentBinary());
                    }
                    return is;
                }
            };
        }
        return sc;
    }

    /**
     * Helper method to convert the passed file to a byte[] and set it using setDocumentBinary().
     * @param localFile to read the content from
     * @see #setDocumentBinary(byte[])
     */
    public void setDocumentBinaryFromFile(File localFile) {
        try {
            setDocumentBinary(FileUtils.readFileToByteArray(localFile));
        } catch (Exception e) {
            throw new RuntimeException("Could not read from file", e);
        }
    }

    /**
     * Helper method to copy documentBinary byte array to the passed target file.
     *
     * @return the passed targetFile as a convenience.
     * @throws IllegalStateException when no binary is set
     * @see #getDocumentBinary()
     */
    @Transient
    @XmlTransient
    public File getDocumentBinaryToFile(File targetFile) throws IOException {
        if (getDocumentBinary() != null) {
            throw new IllegalStateException("Empty binary");
        }

        FileUtils.writeByteArrayToFile(targetFile, getDocumentBinary());
        return targetFile;
    }

    /**
     * Helper method to copy documentBinary byte array to a temporary file.
     *
     * @throws IllegalStateException when no binary is set
     * @return a temporary file holding a copy of the documentBinary byte array
     * @see #getDocumentBinary()
     */
    @Transient
    @XmlTransient
    public File getDocumentBinaryToTempFile() throws IOException {
        return getDocumentBinaryToFile(File.createTempFile("documentBinary", "file"));
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Document.accountId ==> Account.accountId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "account_id", nullable = false)
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public Account getAccount() {
        return account;
    }

    /**
     * Set the account without adding this Document instance on the passed account
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by Account
     */
    public void setAccount(Account account) {
        this.account = account;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (account != null) {
            setAccountId(account.getAccountId());
        } else {
            setAccountId(null);
        }
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------

    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.

    @Override
    public boolean equals(Object document) {
        if (this == document) {
            return true;
        }

        if (!(document instanceof Document)) {
            return false;
        }

        Document other = (Document) document;
        return _getUid().equals(other._getUid());
    }

    @Override
    public int hashCode() {
        return _getUid().hashCode();
    }

    private Object _uid;

    private Object _getUid() {
        if (_uid == null) {
            if (isPrimaryKeySet()) {
                _uid = getPrimaryKey();
            } else {
                _uid = new java.rmi.dgc.VMID();
                logger
                        .warn("DEVELOPER: hashCode has changed!."
                                + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                                + getClass().getCanonicalName());
            }
        }
        return _uid;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------

    /**
     * Construct a readable string representation for this Document instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("document.documentId=[").append(getDocumentId()).append("]\n");
        result.append("document.accountId=[").append(getAccountId()).append("]\n");
        result.append("document.documentContentType=[").append(getDocumentContentType()).append("]\n");
        result.append("document.documentSize=[").append(getDocumentSize()).append("]\n");
        result.append("document.documentFileName=[").append(getDocumentFileName()).append("]\n");
        result.append("document.documentBinary=[").append(getDocumentBinary()).append("]\n");
        result.append("document.version=[").append(getVersion()).append("]\n");
        return result.toString();
    }
}