/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.yourcompany.yourproject.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import com.yourcompany.yourproject.domain.Account;

@Entity
@Table(name = "BOOK")
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myBookFilter", defaultCondition = "account_id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myBookFilter")
public class Book implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(Book.class);

    // Raw attributes
    private Integer bookId; // pk
    private String title; // not null
    private Integer numberOfPages; // not null
    private Integer version;

    // Technical attributes for query by example
    private String accountId;

    // Many to one
    private Account account; // (accountId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public Book() {
    }

    public Book(Integer primaryKey) {
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Transient
    @XmlTransient
    public Integer getPrimaryKey() {
        return getBookId();
    }

    public void setPrimaryKey(Integer bookId) {
        setBookId(bookId);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isBookIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [bookId] ------------------------

    @Column(name = "BOOK_ID", nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getBookId() {
        return bookId;
    }

    public void setBookId(Integer bookId) {
        this.bookId = bookId;
    }

    @Transient
    public boolean isBookIdSet() {
        return bookId != null;
    }

    // -- [accountId] ------------------------

    @Column(name = "account_id", length = 32, insertable = false, updatable = false)
    public String getAccountId() {
        return accountId;
    }

    private void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    // -- [title] ------------------------

    @NotEmpty
    @Length(max = 255)
    @Column(name = "TITLE", nullable = false)
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    // -- [numberOfPages] ------------------------

    @NotNull
    @Column(name = "NUMBER_OF_PAGES", nullable = false, precision = 10)
    public Integer getNumberOfPages() {
        return numberOfPages;
    }

    public void setNumberOfPages(Integer numberOfPages) {
        this.numberOfPages = numberOfPages;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Book.accountId ==> Account.accountId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "account_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public Account getAccount() {
        return account;
    }

    /**
     * Set the account without adding this Book instance on the passed account
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by Account
     */
    public void setAccount(Account account) {
        this.account = account;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (account != null) {
            setAccountId(account.getAccountId());
        } else {
            setAccountId(null);
        }
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------

    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.

    @Override
    public boolean equals(Object book) {
        if (this == book) {
            return true;
        }

        if (!(book instanceof Book)) {
            return false;
        }

        Book other = (Book) book;
        return _getUid().equals(other._getUid());
    }

    @Override
    public int hashCode() {
        return _getUid().hashCode();
    }

    private Object _uid;

    private Object _getUid() {
        if (_uid == null) {
            if (isPrimaryKeySet()) {
                _uid = getPrimaryKey();
            } else {
                _uid = new java.rmi.dgc.VMID();
                logger
                        .warn("DEVELOPER: hashCode has changed!."
                                + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                                + getClass().getCanonicalName());
            }
        }
        return _uid;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------

    /**
     * Construct a readable string representation for this Book instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("book.bookId=[").append(getBookId()).append("]\n");
        result.append("book.accountId=[").append(getAccountId()).append("]\n");
        result.append("book.title=[").append(getTitle()).append("]\n");
        result.append("book.numberOfPages=[").append(getNumberOfPages()).append("]\n");
        result.append("book.version=[").append(getVersion()).append("]\n");
        return result.toString();
    }
}