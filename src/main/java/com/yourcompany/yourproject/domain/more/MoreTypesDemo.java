/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.yourcompany.yourproject.domain.more;

import static javax.persistence.TemporalType.DATE;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Digits;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import com.yourcompany.yourproject.domain.Identifiable;

@Entity
@Table(name = "MORE_TYPES_DEMO")
@Cache(usage = NONSTRICT_READ_WRITE)
public class MoreTypesDemo implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(MoreTypesDemo.class);

    // Raw attributes
    private Integer moreTypesDemoId; // pk
    private Integer numberInt;
    private Long numberLong;
    private Double numberDouble;
    private Float numberFloat;
    private BigInteger numberBigInteger;
    private BigDecimal numberBigDecimal;
    private Date dateJavaTemporalDate;
    private Date dateJavaTemporalTimestamp;
    private LocalDate dateJoda;
    private LocalDateTime dateTimeJoda;
    private Integer version;

    // ---------------------------
    // Constructors
    // ---------------------------

    public MoreTypesDemo() {
    }

    public MoreTypesDemo(Integer primaryKey) {
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Transient
    @XmlTransient
    public Integer getPrimaryKey() {
        return getMoreTypesDemoId();
    }

    public void setPrimaryKey(Integer moreTypesDemoId) {
        setMoreTypesDemoId(moreTypesDemoId);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isMoreTypesDemoIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [moreTypesDemoId] ------------------------

    @Column(name = "MORE_TYPES_DEMO_ID", nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getMoreTypesDemoId() {
        return moreTypesDemoId;
    }

    public void setMoreTypesDemoId(Integer moreTypesDemoId) {
        this.moreTypesDemoId = moreTypesDemoId;
    }

    @Transient
    public boolean isMoreTypesDemoIdSet() {
        return moreTypesDemoId != null;
    }

    // -- [numberInt] ------------------------

    @Column(name = "NUMBER_INT", precision = 10)
    public Integer getNumberInt() {
        return numberInt;
    }

    public void setNumberInt(Integer numberInt) {
        this.numberInt = numberInt;
    }

    // -- [numberLong] ------------------------

    @Column(name = "NUMBER_LONG", precision = 19)
    public Long getNumberLong() {
        return numberLong;
    }

    public void setNumberLong(Long numberLong) {
        this.numberLong = numberLong;
    }

    /**
     * Helper method to set the numberLong attribute via an int.
     * @see #setNumberLong(Long)
     */
    public void setNumberLong(int numberLong) {
        this.numberLong = Long.valueOf(numberLong);
    }

    // -- [numberDouble] ------------------------

    @Column(name = "NUMBER_DOUBLE", precision = 17)
    public Double getNumberDouble() {
        return numberDouble;
    }

    public void setNumberDouble(Double numberDouble) {
        this.numberDouble = numberDouble;
    }

    /**
     * Helper method to set the numberDouble attribute via an int.
     * @see #setNumberDouble(Double)
     */
    public void setNumberDouble(int numberDouble) {
        this.numberDouble = Double.valueOf(numberDouble);
    }

    // -- [numberFloat] ------------------------

    @Column(name = "NUMBER_FLOAT", precision = 7)
    public Float getNumberFloat() {
        return numberFloat;
    }

    public void setNumberFloat(Float numberFloat) {
        this.numberFloat = numberFloat;
    }

    /**
     * Helper method to set the numberFloat attribute via an int.
     * @see #setNumberFloat(Float)
     */
    public void setNumberFloat(int numberFloat) {
        this.numberFloat = Float.valueOf(numberFloat);
    }

    // -- [numberBigInteger] ------------------------

    @Column(name = "NUMBER_BIG_INTEGER", precision = 20)
    public BigInteger getNumberBigInteger() {
        return numberBigInteger;
    }

    public void setNumberBigInteger(BigInteger numberBigInteger) {
        this.numberBigInteger = numberBigInteger;
    }

    /**
     * Helper method to set the numberBigInteger attribute via an int.
     * @see #setNumberBigInteger(BigInteger)
     */
    public void setNumberBigInteger(int numberBigInteger) {
        this.numberBigInteger = BigInteger.valueOf(numberBigInteger);
    }

    // -- [numberBigDecimal] ------------------------

    @Digits(integer = 20, fraction = 2)
    @Column(name = "NUMBER_BIG_DECIMAL", precision = 20, scale = 2)
    public BigDecimal getNumberBigDecimal() {
        return numberBigDecimal;
    }

    public void setNumberBigDecimal(BigDecimal numberBigDecimal) {
        this.numberBigDecimal = numberBigDecimal;
    }

    /**
     * Helper method to set the numberBigDecimal attribute via an int.
     * @see #setNumberBigDecimal(BigDecimal)
     */
    public void setNumberBigDecimal(int numberBigDecimal) {
        this.numberBigDecimal = BigDecimal.valueOf(numberBigDecimal);
    }

    // -- [dateJavaTemporalDate] ------------------------

    @Column(name = "DATE_JAVA_TEMPORAL_DATE", length = 8)
    @Temporal(DATE)
    public Date getDateJavaTemporalDate() {
        return dateJavaTemporalDate;
    }

    public void setDateJavaTemporalDate(Date dateJavaTemporalDate) {
        this.dateJavaTemporalDate = dateJavaTemporalDate;
    }

    // -- [dateJavaTemporalTimestamp] ------------------------

    @Column(name = "DATE_JAVA_TEMPORAL_TIMESTAMP", length = 23)
    @Temporal(TIMESTAMP)
    public Date getDateJavaTemporalTimestamp() {
        return dateJavaTemporalTimestamp;
    }

    public void setDateJavaTemporalTimestamp(Date dateJavaTemporalTimestamp) {
        this.dateJavaTemporalTimestamp = dateJavaTemporalTimestamp;
    }

    // -- [dateJoda] ------------------------

    @Column(name = "date_joda", length = 8)
    @Type(type = "org.joda.time.contrib.hibernate.PersistentLocalDate")
    public LocalDate getDateJoda() {
        return dateJoda;
    }

    public void setDateJoda(LocalDate dateJoda) {
        this.dateJoda = dateJoda;
    }

    // -- [dateTimeJoda] ------------------------

    @Column(name = "date_time_joda", length = 23)
    @Type(type = "org.joda.time.contrib.hibernate.PersistentLocalDateTime")
    public LocalDateTime getDateTimeJoda() {
        return dateTimeJoda;
    }

    public void setDateTimeJoda(LocalDateTime dateTimeJoda) {
        this.dateTimeJoda = dateTimeJoda;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------

    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.

    @Override
    public boolean equals(Object moreTypesDemo) {
        if (this == moreTypesDemo) {
            return true;
        }

        if (!(moreTypesDemo instanceof MoreTypesDemo)) {
            return false;
        }

        MoreTypesDemo other = (MoreTypesDemo) moreTypesDemo;
        return _getUid().equals(other._getUid());
    }

    @Override
    public int hashCode() {
        return _getUid().hashCode();
    }

    private Object _uid;

    private Object _getUid() {
        if (_uid == null) {
            if (isPrimaryKeySet()) {
                _uid = getPrimaryKey();
            } else {
                _uid = new java.rmi.dgc.VMID();
                logger
                        .warn("DEVELOPER: hashCode has changed!."
                                + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                                + getClass().getCanonicalName());
            }
        }
        return _uid;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------

    /**
     * Construct a readable string representation for this MoreTypesDemo instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("moreTypesDemo.moreTypesDemoId=[").append(getMoreTypesDemoId()).append("]\n");
        result.append("moreTypesDemo.numberInt=[").append(getNumberInt()).append("]\n");
        result.append("moreTypesDemo.numberLong=[").append(getNumberLong()).append("]\n");
        result.append("moreTypesDemo.numberDouble=[").append(getNumberDouble()).append("]\n");
        result.append("moreTypesDemo.numberFloat=[").append(getNumberFloat()).append("]\n");
        result.append("moreTypesDemo.numberBigInteger=[").append(getNumberBigInteger()).append("]\n");
        result.append("moreTypesDemo.numberBigDecimal=[").append(getNumberBigDecimal()).append("]\n");
        result.append("moreTypesDemo.dateJavaTemporalDate=[").append(getDateJavaTemporalDate()).append("]\n");
        result.append("moreTypesDemo.dateJavaTemporalTimestamp=[").append(getDateJavaTemporalTimestamp()).append("]\n");
        result.append("moreTypesDemo.dateJoda=[").append(getDateJoda()).append("]\n");
        result.append("moreTypesDemo.dateTimeJoda=[").append(getDateTimeJoda()).append("]\n");
        result.append("moreTypesDemo.version=[").append(getVersion()).append("]\n");
        return result.toString();
    }
}