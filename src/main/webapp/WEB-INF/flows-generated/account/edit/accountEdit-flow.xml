<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 ! Source code generated by Celerio, a Jaxio product
 ! Want to use Celerio within your company? email us at info@jaxio.com
 ! Follow us on twitter: @springfuse
 ! Template pack-jsf2-primefaces:src/main/webapp/WEB-INF/flows/edit/editFlow.e.vm.xml
-->
<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
    
	<persistence-context />
    <!-- ====================== -->
    <!-- Flow vars -->
    <!-- ====================== -->
    <var name="tabBean" class="com.yourcompany.yourproject.web.util.TabBean"/>

	<!-- ====================== -->
	<!-- Flow input parameters  -->
	<!-- ====================== -->
    <!-- * account: the entity to edit/create -->
	<!-- * sub: when sub is true, we assume this flow is used as a subflow by a parent flow. -->
	<!-- * readonly: open the passed account in read-only mode -->
    <input name="account" required="true" value="flowScope.account"/>
	<input name="sub" type="boolean" value="flowScope.sub"/>
	<input name="readonly" type="boolean" />

	<decision-state id="startChoice">
		<if test="sub" then="accountSubEdit" else="accountEdit" />
	</decision-state>
	<!-- ====================== -->
	<!-- EDIT -->
	<!-- ====================== -->
	<view-state id="accountEdit" model="account" parent="#accountEditCommon">
        <on-render>
            <evaluate expression="flowsMenuHandler.updateMenu(flowRequestContext,account.primaryKey,accountConverter.print(account))" /> 
        </on-render>
    
        <!-- event handlers -->
        <transition on="send">
            <evaluate expression="messageUtil.info('status_submitted_ok')" />        
            <render fragments="form:messages"/>
        </transition>

		<transition on="save">
			<evaluate expression="accountService.save(flowScope.account)" />
			<evaluate expression="messageUtil.info('status_saved_ok')" />
            <render fragments="form:messages,form:delete"/>
		</transition>

		<transition on="saveAndClose">
            <evaluate expression="accountService.save(flowScope.account)" />
            <evaluate expression="primeFacesUtil.forceClose()"/>
            <render fragments="form:messages"/>        
        </transition>
        
		<transition on="close" validate="false" >
            <evaluate expression="primeFacesUtil.showAskForSaveDialog((account != null and !account.isPrimaryKeySet()) or persistenceContext.delegate.isDirty())"/>
        </transition>

		<transition on="quit" validate="false">
			<set name="conversationScope.endParam" value="'_cascadeQuit'" />
            <!--  TODO -->
            <evaluate expression="primeFacesUtil.showAskForSaveDialog((account != null and !account.isPrimaryKeySet()) or persistenceContext.delegate.isDirty())"/>            
		</transition>

        <!-- transitions -->
        <transition on="deleteAndClose" to="deleteAndClose" validate="false">
            <evaluate expression="accountService.delete(flowScope.account)" />
        </transition>        
	</view-state>

	<!-- ====================== -->
	<!-- SUB-EDIT -->
	<!-- ====================== -->
	<view-state id="accountSubEdit" model="account" parent="#accountEditCommon">
        <!-- events handlers -->
		<transition on="ok">
            <evaluate expression="primeFacesUtil.forceClose()"/>
            <render fragments="form:messages"/>        
        </transition>
        
        <!-- transitions -->        
        <transition on="cancel" to="cancelEdit" validate="false" />
	</view-state>

	<!-- ====================== -->
	<!-- COMMON-EDIT -->
	<!-- ====================== -->
	<view-state id="accountEditCommon" model="account">
		<on-entry>
			<!-- Prefetch one to many lists and convert them to dataModel -->
			<evaluate expression="account.books" result="flowScope.books" result-type="dataModel" />
			<evaluate expression="account.documents" result="flowScope.documents" result-type="dataModel" />
			<!-- Prefetch many to many lists and convert them to dataModel -->
			<evaluate expression="account.roles" result="flowScope.roles" result-type="dataModel" />
		</on-entry>

		<!-- TRANSITION: X TO ONE (homeAddress) -->
		<transition on="selectHomeAddress" to="subflowSelectHomeAddress" validate="false" />
        <transition on="editHomeAddress" to="subflowEditHomeAddress" validate="false">
            <set name="requestScope.paramReadonly" value="false" type="boolean" />        
        </transition>
		<transition on="viewHomeAddress" to="subflowEditHomeAddress" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />        
        </transition>

		<!-- TRANSITION: X TO ONE (contactInformation) -->
        <transition on="addContactInformation" to="subflowAddContactInformation" validate="false" />
        <transition on="editContactInformation" to="subflowEditContactInformation" validate="false">
            <set name="requestScope.paramReadonly" value="false" type="boolean" />        
        </transition>
		<transition on="viewContactInformation" to="subflowEditContactInformation" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />        
        </transition>

		<!-- TRANSITION: ONE TO MANY (books) -->
		<transition on="addBook" to="subflowAddBook" validate="false" />
		<transition on="editBook" to="subflowEditBook" validate="false">
            <set name="requestScope.paramReadonly" value="false" type="boolean" />        
        </transition>
		<transition on="viewBook" to="subflowEditBook" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />
        </transition>
		<transition on="removeBook" validate="false">
			<evaluate expression="account.removeBook(flowScope.books.selectedRow)" />
            <evaluate expression="messageUtil.info('status_removed_ok',resourceBundle.account_books)" />            
            <render fragments="form:tabs:booksList,form:messages"/>
		</transition>

		<!-- TRANSITION: ONE TO MANY (documents) -->
		<transition on="addDocument" to="subflowAddDocument" validate="false" />
		<transition on="editDocument" to="subflowEditDocument" validate="false">
            <set name="requestScope.paramReadonly" value="false" type="boolean" />        
        </transition>
		<transition on="viewDocument" to="subflowEditDocument" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />
        </transition>
		<transition on="removeDocument" validate="false">
			<evaluate expression="account.removeDocument(flowScope.documents.selectedRow)" />
            <evaluate expression="messageUtil.info('status_removed_ok',resourceBundle.account_documents)" />            
            <render fragments="form:tabs:documentsList,form:messages"/>
		</transition>

		<!-- TRANSITION: MANY TO MANY (roles) -->
		<transition on="searchRole" to="subflowSearchRole" validate="false" />
		<transition on="addRole" to="subflowAddRole" validate="false" />
		<transition on="viewRole" to="subflowEditRole" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />        
        </transition>
		<transition on="removeRole" validate="false">
			<evaluate expression="account.removeRole(flowScope.roles.selectedRow)" />
            <evaluate expression="messageUtil.info('status_removed_ok',resourceBundle.account_roles)" />            
            <render fragments="form:tabs:rolesList,form:messages"/>            
		</transition>
	</view-state>
	<!-- ======== -->
	<!-- X TO ONE -->
	<!-- ======== -->
	<!-- [SUBFLOW CALLS (X To one): homeAddress] -->
    <subflow-state id="subflowSelectHomeAddress" subflow="address/select">
        <input name="sub" value="true" />
        <transition on="addressSelected" to="startChoice">
            <evaluate expression="account.setHomeAddress(currentEvent.attributes.addressSelected)" />
            <evaluate expression="messageUtil.info('status_selected_ok',resourceBundle.account_homeAddress)" />             
        </transition>
        <transition on="cancel" to="startChoice" />
    </subflow-state>
	<subflow-state id="subflowEditHomeAddress" subflow="address/edit">
		<input name="sub" value="true" />
		<input name="readonly" value="requestScope.paramReadonly" />
		<input name="address" value="account.homeAddress" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.account_homeAddress)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>

	<!-- [SUBFLOW CALLS (X To one): contactInformation] -->
    <subflow-state id="subflowAddContactInformation" subflow="contactInfo/edit">
        <input name="sub" value="true" />
        <input name="contactInfo" value="contactInfoService.newWithDefaults" />
        <transition on="endEdit" to="startChoice">
            <evaluate expression="account.setContactInformation(currentEvent.attributes.contactInfo)" />
            <evaluate expression="messageUtil.info('status_created_ok',resourceBundle.account_contactInformation)" />            
        </transition>
        <transition on="cancelEdit" to="startChoice" />
    </subflow-state>
	<subflow-state id="subflowEditContactInformation" subflow="contactInfo/edit">
		<input name="sub" value="true" />
		<input name="readonly" value="requestScope.paramReadonly" />
		<input name="contactInfo" value="account.contactInformation" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.account_contactInformation)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>

	<!-- =========== -->
	<!-- ONE TO MANY -->
	<!-- =========== -->
	<!-- [SUBFLOW CALLS (One To Many): books] -->
	<subflow-state id="subflowAddBook" subflow="book/edit">
		<input name="sub" value="true" />
		<input name="book" value="bookService.newWithDefaults" />
		<transition on="endEdit" to="startChoice">
			<evaluate expression="account.addBook(currentEvent.attributes.book)" />
            <evaluate expression="messageUtil.info('status_added_new_ok',resourceBundle.account_books)" />            
		</transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>
	<subflow-state id="subflowEditBook" subflow="book/edit">
		<input name="sub" value="true" />
        <input name="readonly" value="requestScope.paramReadonly" />        
		<input name="book" value="flowScope.books.selectedRow" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.account_books)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>

	<!-- [SUBFLOW CALLS (One To Many): documents] -->
	<subflow-state id="subflowAddDocument" subflow="document/edit">
		<input name="sub" value="true" />
		<input name="document" value="documentService.newWithDefaults" />
		<transition on="endEdit" to="startChoice">
			<evaluate expression="account.addDocument(currentEvent.attributes.document)" />
            <evaluate expression="messageUtil.info('status_added_new_ok',resourceBundle.account_documents)" />            
		</transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>
	<subflow-state id="subflowEditDocument" subflow="document/edit">
		<input name="sub" value="true" />
        <input name="readonly" value="requestScope.paramReadonly" />        
		<input name="document" value="flowScope.documents.selectedRow" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.account_documents)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>

	<!-- ============ -->
	<!-- MANY TO MANY -->
	<!-- ============ -->
	<!-- [SUBFLOW CALLS (Many To Many): roles] -->
	<subflow-state id="subflowSearchRole" subflow="role/select">
		<input name="sub" value="true" />
		<transition on="roleSelected" to="startChoice">
			<evaluate expression="account.addRole(currentEvent.attributes.roleSelected)" />
            <evaluate expression="messageUtil.info('status_added_existing_ok',resourceBundle.account_roles)" />            
		</transition>
		<transition on="cancel" to="startChoice" />
	</subflow-state>
	<subflow-state id="subflowAddRole" subflow="role/edit">
		<input name="sub" value="true" />
		<input name="role" value="roleService.newWithDefaults" />
		<transition on="endEdit" to="startChoice">
			<evaluate expression="account.addRole(currentEvent.attributes.role)" />
            <evaluate expression="messageUtil.info('status_added_new_ok',resourceBundle.account_roles)" />        
		</transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>
	<subflow-state id="subflowEditRole" subflow="role/edit">
		<input name="sub" value="true" />
        <input name="readonly" value="requestScope.paramReadonly" />        
		<input name="role" value="flowScope.roles.selectedRow" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.account_roles)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>
    

	<!-- ========== -->
	<!-- END STATES -->
	<!-- ========== -->
	<end-state id="endEdit">
		<output name="account" value="account" />
	</end-state>
	<end-state id="cancelEdit" />
	<end-state id="deleteAndClose" />
	<end-state id="error" />

	<!-- ================== -->
	<!-- GLOBAL TRANSITIONS -->
	<!-- ================== -->
	<global-transitions>    
        <!-- events handlers -->
		<transition on="debugThrowException">
			<evaluate expression="exceptionUtil.throwRuntimeException()" />
		</transition>

        <!-- transitions -->
        <transition on="forceClose" to="endEdit" validate="false"/>
        <transition on="error" to="error" validate="false" />        
		<transition on-exception="java.lang.RuntimeException" to="error" />
	</global-transitions>
</flow>
