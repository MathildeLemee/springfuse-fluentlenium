<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 ! Source code generated by Celerio, a Jaxio product
 ! Want to use Celerio within your company? email us at info@jaxio.com
 ! Follow us on twitter: @springfuse
 ! Template pack-jsf2-primefaces:src/main/webapp/WEB-INF/flows/edit/editFlow.e.vm.xml
-->
<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
    
	<persistence-context />

	<!-- ====================== -->
	<!-- Flow input parameters  -->
	<!-- ====================== -->
    <!-- * book: the entity to edit/create -->
	<!-- * sub: when sub is true, we assume this flow is used as a subflow by a parent flow. -->
	<!-- * readonly: open the passed book in read-only mode -->
    <input name="book" required="true" value="flowScope.book"/>
	<input name="sub" type="boolean" value="flowScope.sub"/>
	<input name="readonly" type="boolean" />

	<decision-state id="startChoice">
		<if test="sub" then="bookSubEdit" else="bookEdit" />
	</decision-state>
	<!-- ====================== -->
	<!-- EDIT -->
	<!-- ====================== -->
	<view-state id="bookEdit" model="book" parent="#bookEditCommon">
        <on-render>
            <evaluate expression="flowsMenuHandler.updateMenu(flowRequestContext,book.primaryKey,bookConverter.print(book))" /> 
        </on-render>
    
        <!-- event handlers -->
        <transition on="send">
            <evaluate expression="messageUtil.info('status_submitted_ok')" />        
            <render fragments="form:messages"/>
        </transition>

		<transition on="save">
			<evaluate expression="bookService.save(flowScope.book)" />
			<evaluate expression="messageUtil.info('status_saved_ok')" />
            <render fragments="form:messages,form:delete"/>
		</transition>

		<transition on="saveAndClose">
            <evaluate expression="bookService.save(flowScope.book)" />
            <evaluate expression="primeFacesUtil.forceClose()"/>
            <render fragments="form:messages"/>        
        </transition>
        
		<transition on="close" validate="false" >
            <evaluate expression="primeFacesUtil.showAskForSaveDialog((book != null and !book.isPrimaryKeySet()) or persistenceContext.delegate.isDirty())"/>
        </transition>

		<transition on="quit" validate="false">
			<set name="conversationScope.endParam" value="'_cascadeQuit'" />
            <!--  TODO -->
            <evaluate expression="primeFacesUtil.showAskForSaveDialog((book != null and !book.isPrimaryKeySet()) or persistenceContext.delegate.isDirty())"/>            
		</transition>

        <!-- transitions -->
        <transition on="deleteAndClose" to="deleteAndClose" validate="false">
            <evaluate expression="bookService.delete(flowScope.book)" />
        </transition>        
	</view-state>

	<!-- ====================== -->
	<!-- SUB-EDIT -->
	<!-- ====================== -->
	<view-state id="bookSubEdit" model="book" parent="#bookEditCommon">
        <!-- events handlers -->
		<transition on="ok">
            <evaluate expression="primeFacesUtil.forceClose()"/>
            <render fragments="form:messages"/>        
        </transition>
        
        <!-- transitions -->        
        <transition on="cancel" to="cancelEdit" validate="false" />
	</view-state>

	<!-- ====================== -->
	<!-- COMMON-EDIT -->
	<!-- ====================== -->
	<view-state id="bookEditCommon" model="book">

		<!-- TRANSITION: X TO ONE (account) -->
		<transition on="selectAccount" to="subflowSelectAccount" validate="false" />
        <transition on="editAccount" to="subflowEditAccount" validate="false">
            <set name="requestScope.paramReadonly" value="false" type="boolean" />        
        </transition>
		<transition on="viewAccount" to="subflowEditAccount" validate="false">
            <set name="requestScope.paramReadonly" value="true" type="boolean" />        
        </transition>
	</view-state>
	<!-- ======== -->
	<!-- X TO ONE -->
	<!-- ======== -->
	<!-- [SUBFLOW CALLS (X To one): account] -->
    <subflow-state id="subflowSelectAccount" subflow="account/select">
        <input name="sub" value="true" />
        <transition on="accountSelected" to="startChoice">
            <evaluate expression="book.setAccount(currentEvent.attributes.accountSelected)" />
            <evaluate expression="messageUtil.info('status_selected_ok',resourceBundle.book_account)" />             
        </transition>
        <transition on="cancel" to="startChoice" />
    </subflow-state>
	<subflow-state id="subflowEditAccount" subflow="account/edit">
		<input name="sub" value="true" />
		<input name="readonly" value="requestScope.paramReadonly" />
		<input name="account" value="book.account" />
		<transition on="endEdit" to="startChoice">
            <evaluate expression="messageUtil.info('status_edited_ok',resourceBundle.book_account)" />        
        </transition>
		<transition on="cancelEdit" to="startChoice" />
	</subflow-state>


	<!-- ========== -->
	<!-- END STATES -->
	<!-- ========== -->
	<end-state id="endEdit">
		<output name="book" value="book" />
	</end-state>
	<end-state id="cancelEdit" />
	<end-state id="deleteAndClose" />
	<end-state id="error" />

	<!-- ================== -->
	<!-- GLOBAL TRANSITIONS -->
	<!-- ================== -->
	<global-transitions>    
        <!-- events handlers -->
		<transition on="debugThrowException">
			<evaluate expression="exceptionUtil.throwRuntimeException()" />
		</transition>

        <!-- transitions -->
        <transition on="forceClose" to="endEdit" validate="false"/>
        <transition on="error" to="error" validate="false" />        
		<transition on-exception="java.lang.RuntimeException" to="error" />
	</global-transitions>
</flow>
