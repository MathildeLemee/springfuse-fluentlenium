/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/manager/ManagerImplTest.e.vm.java
 */
package com.yourcompany.yourproject.service;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import com.yourcompany.yourproject.domain.Legacy;
import com.yourcompany.yourproject.service.LegacyServiceImpl;
import com.yourcompany.yourproject.dao.LegacyDao;
import com.yourcompany.yourproject.dao.support.SearchTemplate;

/**
 * Unit test on LegacyServiceImpl
 */
public class LegacyServiceImplTest {

    private LegacyServiceImpl legacyServiceImpl;
    private LegacyDao legacyDao;

    @Before
    public void setUp() {
        // called before each test.
        legacyServiceImpl = new LegacyServiceImpl();
        legacyDao = mock(LegacyDao.class);
        legacyServiceImpl.setLegacyDao(legacyDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        List<Legacy> none = new ArrayList<Legacy>();

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(none);

        Legacy result = legacyServiceImpl.findUniqueOrNone(new Legacy());

        assertThat(result).isNull();
        verify(legacyDao, times(1)).find(any(Legacy.class), any(SearchTemplate.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        List<Legacy> unique = new ArrayList<Legacy>();
        unique.add(new Legacy());

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(unique);

        Legacy result = legacyServiceImpl.findUniqueOrNone(new Legacy());

        assertThat(result).isNotNull();
        verify(legacyDao, times(1)).find(any(Legacy.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        List<Legacy> multiple = new ArrayList<Legacy>();
        multiple.add(new Legacy());
        multiple.add(new Legacy());

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(multiple);

        legacyServiceImpl.findUniqueOrNone(new Legacy());
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseNone() {
        List<Legacy> none = new ArrayList<Legacy>();

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(none);

        legacyServiceImpl.findUnique(new Legacy());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        List<Legacy> unique = new ArrayList<Legacy>();
        unique.add(new Legacy());

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(unique);

        Legacy result = legacyServiceImpl.findUnique(new Legacy());

        assertThat(result).isNotNull();
        verify(legacyDao, times(1)).find(any(Legacy.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseMultiple() {
        List<Legacy> multiple = new ArrayList<Legacy>();
        multiple.add(new Legacy());
        multiple.add(new Legacy());

        when(legacyDao.find(any(Legacy.class), any(SearchTemplate.class))).thenReturn(multiple);

        legacyServiceImpl.findUnique(new Legacy());
    }
}