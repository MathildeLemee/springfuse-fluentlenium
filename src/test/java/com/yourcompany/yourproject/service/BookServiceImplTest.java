/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/manager/ManagerImplTest.e.vm.java
 */
package com.yourcompany.yourproject.service;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import com.yourcompany.yourproject.domain.Book;
import com.yourcompany.yourproject.service.BookServiceImpl;
import com.yourcompany.yourproject.dao.BookDao;
import com.yourcompany.yourproject.dao.support.SearchTemplate;

/**
 * Unit test on BookServiceImpl
 */
public class BookServiceImplTest {

    private BookServiceImpl bookServiceImpl;
    private BookDao bookDao;

    @Before
    public void setUp() {
        // called before each test.
        bookServiceImpl = new BookServiceImpl();
        bookDao = mock(BookDao.class);
        bookServiceImpl.setBookDao(bookDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        List<Book> none = new ArrayList<Book>();

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(none);

        Book result = bookServiceImpl.findUniqueOrNone(new Book());

        assertThat(result).isNull();
        verify(bookDao, times(1)).find(any(Book.class), any(SearchTemplate.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        List<Book> unique = new ArrayList<Book>();
        unique.add(new Book());

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(unique);

        Book result = bookServiceImpl.findUniqueOrNone(new Book());

        assertThat(result).isNotNull();
        verify(bookDao, times(1)).find(any(Book.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        List<Book> multiple = new ArrayList<Book>();
        multiple.add(new Book());
        multiple.add(new Book());

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(multiple);

        bookServiceImpl.findUniqueOrNone(new Book());
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseNone() {
        List<Book> none = new ArrayList<Book>();

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(none);

        bookServiceImpl.findUnique(new Book());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        List<Book> unique = new ArrayList<Book>();
        unique.add(new Book());

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(unique);

        Book result = bookServiceImpl.findUnique(new Book());

        assertThat(result).isNotNull();
        verify(bookDao, times(1)).find(any(Book.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseMultiple() {
        List<Book> multiple = new ArrayList<Book>();
        multiple.add(new Book());
        multiple.add(new Book());

        when(bookDao.find(any(Book.class), any(SearchTemplate.class))).thenReturn(multiple);

        bookServiceImpl.findUnique(new Book());
    }
}