/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/manager/ManagerImplTest.e.vm.java
 */
package com.yourcompany.yourproject.service.more;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import com.yourcompany.yourproject.domain.more.MoreTypesDemo;
import com.yourcompany.yourproject.service.more.MoreTypesDemoServiceImpl;
import com.yourcompany.yourproject.dao.more.MoreTypesDemoDao;
import com.yourcompany.yourproject.dao.support.SearchTemplate;

/**
 * Unit test on MoreTypesDemoServiceImpl
 */
public class MoreTypesDemoServiceImplTest {

    private MoreTypesDemoServiceImpl moreTypesDemoServiceImpl;
    private MoreTypesDemoDao moreTypesDemoDao;

    @Before
    public void setUp() {
        // called before each test.
        moreTypesDemoServiceImpl = new MoreTypesDemoServiceImpl();
        moreTypesDemoDao = mock(MoreTypesDemoDao.class);
        moreTypesDemoServiceImpl.setMoreTypesDemoDao(moreTypesDemoDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        List<MoreTypesDemo> none = new ArrayList<MoreTypesDemo>();

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(none);

        MoreTypesDemo result = moreTypesDemoServiceImpl.findUniqueOrNone(new MoreTypesDemo());

        assertThat(result).isNull();
        verify(moreTypesDemoDao, times(1)).find(any(MoreTypesDemo.class), any(SearchTemplate.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        List<MoreTypesDemo> unique = new ArrayList<MoreTypesDemo>();
        unique.add(new MoreTypesDemo());

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(unique);

        MoreTypesDemo result = moreTypesDemoServiceImpl.findUniqueOrNone(new MoreTypesDemo());

        assertThat(result).isNotNull();
        verify(moreTypesDemoDao, times(1)).find(any(MoreTypesDemo.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        List<MoreTypesDemo> multiple = new ArrayList<MoreTypesDemo>();
        multiple.add(new MoreTypesDemo());
        multiple.add(new MoreTypesDemo());

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(multiple);

        moreTypesDemoServiceImpl.findUniqueOrNone(new MoreTypesDemo());
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseNone() {
        List<MoreTypesDemo> none = new ArrayList<MoreTypesDemo>();

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(none);

        moreTypesDemoServiceImpl.findUnique(new MoreTypesDemo());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        List<MoreTypesDemo> unique = new ArrayList<MoreTypesDemo>();
        unique.add(new MoreTypesDemo());

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(unique);

        MoreTypesDemo result = moreTypesDemoServiceImpl.findUnique(new MoreTypesDemo());

        assertThat(result).isNotNull();
        verify(moreTypesDemoDao, times(1)).find(any(MoreTypesDemo.class), any(SearchTemplate.class));
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void testFindUniqueCaseMultiple() {
        List<MoreTypesDemo> multiple = new ArrayList<MoreTypesDemo>();
        multiple.add(new MoreTypesDemo());
        multiple.add(new MoreTypesDemo());

        when(moreTypesDemoDao.find(any(MoreTypesDemo.class), any(SearchTemplate.class))).thenReturn(multiple);

        moreTypesDemoServiceImpl.findUnique(new MoreTypesDemo());
    }
}