/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/domain/ModelTest.e.vm.java
 */
package com.yourcompany.yourproject.domain.more;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.yourcompany.yourproject.util.*;
import static javax.persistence.TemporalType.DATE;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Digits;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import com.yourcompany.yourproject.domain.Identifiable;

/**
 * Basic tests for MoreTypesDemo
 */
public class MoreTypesDemoTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        MoreTypesDemo model = new MoreTypesDemo();
        assertFalse(model.isPrimaryKeySet());
    }

    @Test
    public void isPrimaryKeySetReturnsTrue() {
        MoreTypesDemo model = new MoreTypesDemo();
        model.setMoreTypesDemoId(ValueGenerator.getUniqueNumeric(Integer.class, "2147483647"));
        assertNotNull(model.getMoreTypesDemoId());
        assertTrue(model.isPrimaryKeySet());
    }

    // test columns methods

    @Test
    public void toStringNotNull() {
        MoreTypesDemo model = new MoreTypesDemo();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        MoreTypesDemo model1 = new MoreTypesDemo();
        MoreTypesDemo model2 = new MoreTypesDemo();

        Integer moreTypesDemoId = ValueGenerator.getUniqueNumeric(Integer.class, "2147483647");
        model1.setMoreTypesDemoId(moreTypesDemoId);
        model2.setMoreTypesDemoId(moreTypesDemoId);

        model1.setNumberInt(ValueGenerator.getNumeric(java.lang.Integer.class, "1"));
        model2.setNumberInt(ValueGenerator.getNumeric(java.lang.Integer.class, "1"));

        model1.setNumberLong(ValueGenerator.getNumeric(java.lang.Long.class, "1"));
        model2.setNumberLong(ValueGenerator.getNumeric(java.lang.Long.class, "1"));

        model1.setNumberDouble(ValueGenerator.getNumeric(java.lang.Double.class, "1"));
        model2.setNumberDouble(ValueGenerator.getNumeric(java.lang.Double.class, "1"));

        model1.setNumberFloat(ValueGenerator.getNumeric(java.lang.Float.class, "1"));
        model2.setNumberFloat(ValueGenerator.getNumeric(java.lang.Float.class, "1"));

        model1.setNumberBigInteger(ValueGenerator.getNumeric(java.math.BigInteger.class, "1"));
        model2.setNumberBigInteger(ValueGenerator.getNumeric(java.math.BigInteger.class, "1"));

        model1.setNumberBigDecimal(ValueGenerator.getNumeric(java.math.BigDecimal.class, "1"));
        model2.setNumberBigDecimal(ValueGenerator.getNumeric(java.math.BigDecimal.class, "1"));

        model1.setDateJavaTemporalDate(new Date());
        model2.setDateJavaTemporalDate(new Date());

        model1.setDateJavaTemporalTimestamp(new Date());
        model2.setDateJavaTemporalTimestamp(new Date());

        model1.setDateJoda(new org.joda.time.LocalDate());
        model2.setDateJoda(new org.joda.time.LocalDate());

        model1.setDateTimeJoda(new org.joda.time.LocalDateTime());
        model2.setDateTimeJoda(new org.joda.time.LocalDateTime());

        model1.setVersion(ValueGenerator.getNumeric(java.lang.Integer.class, "1"));
        model2.setVersion(ValueGenerator.getNumeric(java.lang.Integer.class, "1"));
        assertTrue(model1.isPrimaryKeySet());
        assertTrue(model2.isPrimaryKeySet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}